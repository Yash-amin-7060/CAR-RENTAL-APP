package com.example.carrental.controller;

import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.carrental.model.Booking;
import com.example.carrental.model.Car;
import com.example.carrental.model.User;
import com.example.carrental.service.BookingService;
import com.example.carrental.service.CarService;
import com.example.carrental.service.CustomUserDetailsService;
import com.example.carrental.service.CustomUserDetailsService.CustomUserDetails;

@Controller
@RequestMapping("/bookings")
public class BookingController {
    
    private static final Logger logger = LoggerFactory.getLogger(BookingController.class);

    @Autowired
    private BookingService bookingService;

    @Autowired
    private CarService carService;

    @Autowired
    private CustomUserDetailsService userService;

    // ... existing methods ...

    @PostMapping("/reset-user-bookings")
    public String resetUserBookings(@AuthenticationPrincipal CustomUserDetails userDetails,
                                  RedirectAttributes redirectAttributes) {
        logger.info("Attempting to reset bookings for user");
        
        if (userDetails == null) {
            logger.error("User not authenticated");
            redirectAttributes.addFlashAttribute("error", "Please log in to reset bookings");
            return "redirect:/login";
        }

        try {
            User user = userService.getUserByEmail(userDetails.getUsername());
            if (user != null) {
                bookingService.resetUserBookings(user);
                logger.info("Successfully reset bookings for user: {}", user.getEmail());
                redirectAttributes.addFlashAttribute("success", "Your bookings have been reset successfully");
            } else {
                logger.error("User not found for email: {}", userDetails.getUsername());
                redirectAttributes.addFlashAttribute("error", "User not found");
            }
        } catch (Exception e) {
            logger.error("Error resetting bookings: {}", e.getMessage());
            redirectAttributes.addFlashAttribute("error", "Failed to reset bookings: " + e.getMessage());
        }
        
        return "redirect:/cars";
    }
} 